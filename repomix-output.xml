This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: prisma
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
prisma/
  migrations/
    20250516033241_init/
      migration.sql
    20250519145758_add_user_orders_relation/
      migration.sql
    20250519155955_add_table_number_to_order/
      migration.sql
    20250519165932_add_user_role/
      migration.sql
    20250519170926_add_user_password_field/
      migration.sql
    migration_lock.toml
  schema.prisma
  seed.js
  seed.mjs
  seed.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="prisma/migrations/20250516033241_init/migration.sql">
-- CreateEnum
CREATE TYPE "UserRole" AS ENUM ('ADMIN', 'STAFF', 'CUSTOMER');

-- CreateEnum
CREATE TYPE "OrderStatus" AS ENUM ('PENDING', 'PREPARING', 'READY', 'DELIVERED', 'COMPLETED', 'CANCELLED');

-- CreateEnum
CREATE TYPE "PaymentStatus" AS ENUM ('PENDING', 'PAID', 'FAILED', 'REFUNDED');

-- CreateEnum
CREATE TYPE "ChallengeType" AS ENUM ('ORDER_COUNT', 'SPEND_AMOUNT', 'SPECIFIC_ITEMS');

-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "name" TEXT,
    "email" TEXT NOT NULL,
    "emailVerified" TIMESTAMP(3),
    "password" TEXT NOT NULL,
    "role" "UserRole" NOT NULL DEFAULT 'CUSTOMER',
    "image" TEXT,
    "address" TEXT,
    "phone" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Category" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "image" TEXT,
    "order" INTEGER NOT NULL DEFAULT 0,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Category_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "MenuItem" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "price" DECIMAL(10,2) NOT NULL,
    "image" TEXT,
    "thumbnail" TEXT,
    "available" BOOLEAN NOT NULL DEFAULT true,
    "featured" BOOLEAN NOT NULL DEFAULT false,
    "categoryId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "MenuItem_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Order" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "status" "OrderStatus" NOT NULL DEFAULT 'PENDING',
    "total" DECIMAL(10,2) NOT NULL,
    "paymentStatus" "PaymentStatus" NOT NULL DEFAULT 'PENDING',
    "paymentMethod" TEXT,
    "deliveryAddress" TEXT,
    "note" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Order_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "OrderItem" (
    "id" TEXT NOT NULL,
    "orderId" TEXT NOT NULL,
    "menuItemId" TEXT NOT NULL,
    "quantity" INTEGER NOT NULL,
    "price" DECIMAL(10,2) NOT NULL,
    "note" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "OrderItem_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Challenge" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "target" INTEGER NOT NULL,
    "type" "ChallengeType" NOT NULL,
    "reward" TEXT NOT NULL,
    "rewardValue" DECIMAL(10,2),
    "startDate" TIMESTAMP(3) NOT NULL,
    "endDate" TIMESTAMP(3) NOT NULL,
    "active" BOOLEAN NOT NULL DEFAULT true,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Challenge_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ChallengeProgress" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "challengeId" TEXT NOT NULL,
    "progress" INTEGER NOT NULL DEFAULT 0,
    "completed" BOOLEAN NOT NULL DEFAULT false,
    "rewardClaimed" BOOLEAN NOT NULL DEFAULT false,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "ChallengeProgress_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "DailySales" (
    "id" TEXT NOT NULL,
    "date" TIMESTAMP(3) NOT NULL,
    "totalSales" DECIMAL(10,2) NOT NULL,
    "orderCount" INTEGER NOT NULL,
    "averageOrder" DECIMAL(10,2) NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "DailySales_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "ChallengeProgress_userId_challengeId_key" ON "ChallengeProgress"("userId", "challengeId");

-- CreateIndex
CREATE UNIQUE INDEX "DailySales_date_key" ON "DailySales"("date");

-- AddForeignKey
ALTER TABLE "MenuItem" ADD CONSTRAINT "MenuItem_categoryId_fkey" FOREIGN KEY ("categoryId") REFERENCES "Category"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Order" ADD CONSTRAINT "Order_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "OrderItem" ADD CONSTRAINT "OrderItem_orderId_fkey" FOREIGN KEY ("orderId") REFERENCES "Order"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "OrderItem" ADD CONSTRAINT "OrderItem_menuItemId_fkey" FOREIGN KEY ("menuItemId") REFERENCES "MenuItem"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ChallengeProgress" ADD CONSTRAINT "ChallengeProgress_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ChallengeProgress" ADD CONSTRAINT "ChallengeProgress_challengeId_fkey" FOREIGN KEY ("challengeId") REFERENCES "Challenge"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
</file>

<file path="prisma/migrations/20250519145758_add_user_orders_relation/migration.sql">
/*
  Warnings:

  - You are about to drop the column `address` on the `User` table. All the data in the column will be lost.
  - You are about to drop the column `createdAt` on the `User` table. All the data in the column will be lost.
  - You are about to drop the column `password` on the `User` table. All the data in the column will be lost.
  - You are about to drop the column `phone` on the `User` table. All the data in the column will be lost.
  - You are about to drop the column `role` on the `User` table. All the data in the column will be lost.
  - You are about to drop the column `updatedAt` on the `User` table. All the data in the column will be lost.

*/
-- AlterTable
ALTER TABLE "User" DROP COLUMN "address",
DROP COLUMN "createdAt",
DROP COLUMN "password",
DROP COLUMN "phone",
DROP COLUMN "role",
DROP COLUMN "updatedAt",
ALTER COLUMN "email" DROP NOT NULL;

-- DropEnum
DROP TYPE "UserRole";

-- CreateTable
CREATE TABLE "Account" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "provider" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "refresh_token" TEXT,
    "access_token" TEXT,
    "expires_at" INTEGER,
    "token_type" TEXT,
    "scope" TEXT,
    "id_token" TEXT,
    "session_state" TEXT,

    CONSTRAINT "Account_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Session" (
    "id" TEXT NOT NULL,
    "sessionToken" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Session_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "VerificationToken" (
    "identifier" TEXT NOT NULL,
    "token" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL
);

-- CreateIndex
CREATE UNIQUE INDEX "Account_provider_providerAccountId_key" ON "Account"("provider", "providerAccountId");

-- CreateIndex
CREATE UNIQUE INDEX "Session_sessionToken_key" ON "Session"("sessionToken");

-- CreateIndex
CREATE UNIQUE INDEX "VerificationToken_token_key" ON "VerificationToken"("token");

-- CreateIndex
CREATE UNIQUE INDEX "VerificationToken_identifier_token_key" ON "VerificationToken"("identifier", "token");

-- AddForeignKey
ALTER TABLE "Account" ADD CONSTRAINT "Account_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Session" ADD CONSTRAINT "Session_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;
</file>

<file path="prisma/migrations/20250519155955_add_table_number_to_order/migration.sql">
/*
  Warnings:

  - You are about to drop the column `deliveryAddress` on the `Order` table. All the data in the column will be lost.

*/
-- AlterTable
ALTER TABLE "Order" DROP COLUMN "deliveryAddress",
ADD COLUMN     "tableNumber" TEXT NOT NULL DEFAULT '';
</file>

<file path="prisma/migrations/20250519165932_add_user_role/migration.sql">
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "role" TEXT NOT NULL DEFAULT 'CUSTOMER';
</file>

<file path="prisma/migrations/20250519170926_add_user_password_field/migration.sql">
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "password" TEXT NOT NULL DEFAULT '';
</file>

<file path="prisma/migrations/migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"
</file>

<file path="prisma/schema.prisma">
// schema.prisma

generator client {
  provider   = "prisma-client-js"
  engineType = "dataproxy"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------
// NextAuth 用モデル
// -----------------------------
model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  password          String              @default("")
  emailVerified     DateTime?
  image             String?
  role              String              @default("CUSTOMER")
  accounts          Account[]
  sessions          Session[]
  orders            Order[]
  challengeProgress ChallengeProgress[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -----------------------------
// アプリケーション固有モデル
// -----------------------------
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menuItems MenuItem[]
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  image       String?
  thumbnail   String?
  available   Boolean  @default(true)
  featured    Boolean  @default(false)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
}

model Order {
  id              String        @id @default(cuid())
  userId          String
  status          OrderStatus   @default(PENDING)
  total           Decimal       @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  tableNumber   String   @default("")
  note            String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Challenge {
  id          String        @id @default(cuid())
  name        String
  description String
  target      Int // e.g., 注文回数 or 金額
  type        ChallengeType
  reward      String
  rewardValue Decimal?      @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  progress ChallengeProgress[]
}

model ChallengeProgress {
  id            String   @id @default(cuid())
  userId        String
  challengeId   String
  progress      Int      @default(0)
  completed     Boolean  @default(false)
  rewardClaimed Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  challenge Challenge @relation(fields: [challengeId], references: [id])

  @@unique([userId, challengeId])
}

enum ChallengeType {
  ORDER_COUNT
  SPEND_AMOUNT
  SPECIFIC_ITEMS
}

model DailySales {
  id           String   @id @default(cuid())
  date         DateTime @unique
  totalSales   Decimal  @db.Decimal(10, 2)
  orderCount   Int
  averageOrder Decimal  @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
</file>

<file path="prisma/seed.js">
import "dotenv/config";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";

const prisma = new PrismaClient();

async function main() {
	// ────────────────────────────────
	// 1) 管理者（STAFF）ユーザーをシード
	// ────────────────────────────────
	const adminEmail = "admin@example.com";
	const adminPlainPassword = "AdminPass123"; // 好きなパスワードに変更してください
	const adminHash = await bcrypt.hash(adminPlainPassword, 10);

	await prisma.user.upsert({
		where: { email: adminEmail },
		update: {}, // 既に存在する場合は何もしない
		create: {
			email: adminEmail,
			name: "店舗スタッフ（管理者）",
			password: adminHash,
			role: "ADMIN", // Prisma スキーマで @default("CUSTOMER") としている想定
			// 必要に応じて他フィールドも追加 (image, emailVerified など)
		},
	});
	console.log(`✅ Admin user seeded: ${adminEmail} / ${adminPlainPassword}`);

	// ────────────────────────────────
	// 2) カテゴリデータ
	// ────────────────────────────────
	const categoriesData = [
		{ name: "Burgers", description: "Juicy burgers made to order", order: 1 },
		{ name: "Pizzas", description: "Authentic Italian pizzas", order: 2 },
		{ name: "Drinks", description: "Cold and refreshing beverages", order: 3 },
	];

	for (const data of categoriesData) {
		const exists = await prisma.category.findFirst({
			where: { name: data.name },
		});
		if (!exists) {
			await prisma.category.create({ data });
		}
	}

	const burgerCat = await prisma.category.findFirst({
		where: { name: "Burgers" },
	});
	const pizzaCat = await prisma.category.findFirst({
		where: { name: "Pizzas" },
	});
	const drinksCat = await prisma.category.findFirst({
		where: { name: "Drinks" },
	});

	if (!burgerCat || !pizzaCat || !drinksCat) {
		throw new Error("カテゴリの取得に失敗しました");
	}

	// ────────────────────────────────
	// 3) メニューアイテムデータ
	// ────────────────────────────────
	const menuItemsData = [
		{
			name: "Classic Cheeseburger",
			description: "Beef patty with cheddar, lettuce, tomato & pickles",
			price: 8.99,
			categoryId: burgerCat.id,
			available: true,
			featured: true,
		},
		{
			name: "Veggie Burger",
			description: "Grilled veggie patty with avocado spread",
			price: 9.49,
			categoryId: burgerCat.id,
			available: true,
			featured: false,
		},
		{
			name: "Margherita Pizza",
			description: "Tomato, mozzarella, fresh basil",
			price: 12.99,
			categoryId: pizzaCat.id,
			available: true,
			featured: true,
		},
		{
			name: "Pepperoni Pizza",
			description: "Classic pepperoni & cheese",
			price: 14.49,
			categoryId: pizzaCat.id,
			available: true,
			featured: false,
		},
		{
			name: "Cola",
			description: "Sparkling soft drink",
			price: 1.99,
			categoryId: drinksCat.id,
			available: true,
			featured: false,
		},
		{
			name: "Orange Juice",
			description: "Freshly squeezed orange juice",
			price: 2.99,
			categoryId: drinksCat.id,
			available: true,
			featured: false,
		},
	];

	for (const item of menuItemsData) {
		const exists = await prisma.menuItem.findFirst({
			where: { name: item.name },
		});
		if (!exists) {
			await prisma.menuItem.create({ data: item });
		}
	}

	console.log("✅ シードデータの投入が完了しました");
}

main()
	.catch((e) => {
		console.error("❌ シード中にエラーが発生しました:", e);
		process.exit(1);
	})
	.finally(async () => {
		await prisma.$disconnect();
	});
</file>

<file path="prisma/seed.mjs">
// prisma/seed.mjs
import 'dotenv/config'
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // ① すでに同じ name のレコードがあるか探す
  let burger = await prisma.category.findFirst({
    where: { name: 'Burgers' }
  })

  // ② なければ作る
  if (!burger) {
    burger = await prisma.category.create({
      data: {
        name: 'Burgers',
        description: 'Juicy burgers',
        order: 1
      }
    })
  }

  // メニュー項目の投入（image は必ず文字列 URL を入れてください）
  await prisma.menuItem.upsert({
    where: { name: 'Classic Burger' },
    update: {},
    create: {
      name: 'Classic Burger',
      description: 'A tasty beef burger',
      price: 8.99,
      available: true,
      featured: true,
      categoryId: burger.id,
      image:
        'https://images.pexels.com/photos/1639562/pexels-photo-1639562.jpeg',
      thumbnail:
        'https://images.pexels.com/photos/1639562/pexels-photo-1639562.jpeg',
    },
  })
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(() => prisma.$disconnect())
</file>

<file path="prisma/seed.ts">
// prisma/seed.js

// 環境変数を読み込む（.env ファイル）
require('dotenv').config();

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  // ===== カテゴリーの初期データ =====
  const categoriesData = [
    { name: 'Burgers', description: 'Juicy burgers made to order', order: 1 },
    { name: 'Pizzas', description: 'Authentic Italian pizzas', order: 2 },
    { name: 'Drinks', description: 'Cold and refreshing beverages', order: 3 },
  ];

  for (const data of categoriesData) {
    await prisma.category.upsert({
      where: { name: data.name },
      update: {},
      create: data,
    });
  }

  // カテゴリー ID を取得
  const burgerCategory = await prisma.category.findUnique({ where: { name: 'Burgers' } });
  const pizzaCategory  = await prisma.category.findUnique({ where: { name: 'Pizzas' } });
  const drinksCategory = await prisma.category.findUnique({ where: { name: 'Drinks' } });

  if (!burgerCategory || !pizzaCategory || !drinksCategory) {
    throw new Error('カテゴリーの取得に失敗しました');
  }

  // ===== メニューアイテムの初期データ =====
  const menuItemsData = [
    {
      name: 'Classic Cheeseburger',
      description: 'Beef patty with cheddar, lettuce, tomato & pickles',
      price: 8.99,
      categoryId: burgerCategory.id,
      available: true,
      featured: true,
    },
    {
      name: 'Veggie Burger',
      description: 'Grilled veggie patty with avocado spread',
      price: 9.49,
      categoryId: burgerCategory.id,
      available: true,
      featured: false,
    },
    {
      name: 'Margherita Pizza',
      description: 'Tomato, mozzarella, fresh basil',
      price: 12.99,
      categoryId: pizzaCategory.id,
      available: true,
      featured: true,
    },
    {
      name: 'Pepperoni Pizza',
      description: 'Classic pepperoni & cheese',
      price: 14.49,
      categoryId: pizzaCategory.id,
      available: true,
      featured: false,
    },
    {
      name: 'Cola',
      description: 'Sparkling soft drink',
      price: 1.99,
      categoryId: drinksCategory.id,
      available: true,
      featured: false,
    },
    {
      name: 'Orange Juice',
      description: 'Freshly squeezed orange juice',
      price: 2.99,
      categoryId: drinksCategory.id,
      available: true,
      featured: false,
    },
  ];

  for (const item of menuItemsData) {
    await prisma.menuItem.upsert({
      where: { name: item.name },
      update: {},
      create: item,
    });
  }

  console.log('✅ シードデータの投入が完了しました');
}

main()
  .catch((e) => {
    console.error('❌ シード中にエラーが発生しました:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
</file>

</files>
